import React, { useRef, useState } from "react";
import { motion } from "framer-motion";
import {
  MessageSquare,
  Users,
  Calendar,
  Phone,
  Voicemail,
  AppWindow,
  Settings,
  Star,
  MoreVertical,
  Search,
  Plus,
  UserPlus,
  Paperclip,
  Smile,
  Send,
  LayoutTemplate,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";

// ————————————————————————————————————————————————————————
// Fake data (swap with real data later)
const spaces = [
  { id: "s1", title: "Finance Leadership · WW", unread: 3, avatars: ["A", "B", "C"] },
  { id: "s2", title: "Finance Leadership · APAC", unread: 0, avatars: ["D", "E"] },
  { id: "s3", title: "Finance Leadership · EMEA", unread: 5, avatars: ["F", "G", "H", "I"] },
  { id: "s4", title: "All Infra bookings · FY2025Q4", unread: 1, avatars: ["J", "K", "L"] },
  { id: "s5", title: "Bookings Distribution", unread: 0, avatars: ["M", "N"] },
];

const messages = [
  { id: "m1", author: "Girish Patel", time: "08/25 · 3:29 PM", text: "Update pushed to dashboard graphs.", initials: "GP" },
  { id: "m2", author: "Cathy Brown", time: "08/25 · 3:17 PM", text: "Can we review the Q3 cluster bookings?", initials: "CB" },
  { id: "m3", author: "Neil", time: "08/25 · 3:15 PM", text: "The 7G cloud changes are ready for QA.", initials: "N" },
  { id: "m4", author: "Liz Carson", time: "08/25 · 3:10 PM", text: "Left comments in the report doc.", initials: "LC" },
];

// messages per space (used when a space is selected)
const messagesBySpace = {
  s1: [
    { id: "m1", author: "Girish Patel", time: "08/25 · 3:29 PM", text: "WW deck updated—please review.", initials: "GP" },
    { id: "m2", author: "Cathy Brown", time: "08/25 · 3:17 PM", text: "Share the KPI snapshot here.", initials: "CB" },
  ],
  s2: [
    { id: "m3", author: "Neil", time: "08/25 · 3:15 PM", text: "APAC cluster numbers ready.", initials: "N" },
  ],
  s3: [
    { id: "m4", author: "Liz Carson", time: "08/25 · 3:10 PM", text: "EMEA forecast pending signoff.", initials: "LC" },
  ],
  s4: [
    { id: "m5", author: "Girish Patel", time: "08/25 · 3:29 PM", text: "Infra bookings chart refreshed.", initials: "GP" },
    { id: "m6", author: "Neil", time: "08/25 · 3:19 PM", text: "Added region drill‑down.", initials: "N" },
    { id: "m7", author: "Cathy Brown", time: "08/25 · 3:12 PM", text: "Looks good—let's add annotations.", initials: "CB" },
  ],
  s5: [],
};

// ————————————————————————————————————————————————————————
// Utilities

// Pill used for top filters (All, Direct, etc.)
const FilterPill = ({ children, active = false }: { children: React.ReactNode; active?: boolean }) => (
  <Button size="sm" variant={active ? "secondary" : "outline"} className="h-7 rounded-full">
    {children}
  </Button>
);

// Horizontally scrolling chip row with fade + arrow buttons
const ChipStrip = ({ items }: { items: string[] }) => {
  const scroller = useRef<HTMLDivElement | null>(null);
  const scroll = (dx: number) => scroller.current?.scrollBy({ left: dx, behavior: "smooth" });
  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="icon"
        className="absolute left-0 top-1/2 z-10 h-7 w-7 -translate-y-1/2 rounded-full"
        aria-label="Scroll left"
        onClick={() => scroll(-200)}
      >
        <ChevronLeft className="h-4 w-4" />
      </Button>
      <div
        ref={scroller}
        className="flex gap-2 overflow-x-auto px-8 pb-1 text-xs [mask-image:linear-gradient(to_right,transparent,black_24px,black_calc(100%-24px),transparent)]"
      >
        {items.map((t) => (
          <Badge key={t} variant="outline" className="whitespace-nowrap">
            {t}
          </Badge>
        ))}
      </div>
      <Button
        variant="ghost"
        size="icon"
        className="absolute right-0 top-1/2 z-10 h-7 w-7 -translate-y-1/2 rounded-full"
        aria-label="Scroll right"
        onClick={() => scroll(200)}
      >
        <ChevronRight className="h-4 w-4" />
      </Button>
    </div>
  );
};

const RailIconButton = ({ icon: Icon, label }: { icon: any; label: string }) => (
  <Button variant="ghost" size="icon" className="h-12 w-12" aria-label={label}>
    <Icon className="h-5 w-5" />
  </Button>
);

const SpaceListItem = ({ title, unread, avatars, active = false, onClick }: any) => (
  <button onClick={onClick} className={`group w-full rounded-xl px-3 py-2 text-left transition border ${active ? "bg-muted/70 border-primary/20 ring-1 ring-primary/30" : "hover:bg-muted/60"}`}>
    <div className="flex items-center gap-3">
      <div className="flex -space-x-2">
        {avatars.slice(0, 3).map((a: string, idx: number) => (
          <Avatar key={idx} className="h-6 w-6 ring-2 ring-background">
            <AvatarFallback className="text-[10px]">{a}</AvatarFallback>
          </Avatar>
        ))}
      </div>
      <div className="min-w-0 flex-1">
        <div className="truncate text-sm font-medium">{title}</div>
        <div className="text-xs text-muted-foreground">Space</div>
      </div>
      {unread > 0 && <Badge className="ml-auto" variant="secondary">{unread}</Badge>}
    </div>
  </button>
);

const MessageItem = ({ author, time, text, initials }: any) => (
  <div className="flex gap-3 py-3">
    <Avatar className="h-8 w-8">
      <AvatarFallback>{initials}</AvatarFallback>
    </Avatar>
    <div className="min-w-0 flex-1">
      <div className="flex items-center gap-2 text-sm">
        <span className="font-medium">{author}</span>
        <span className="text-muted-foreground">{time}</span>
      </div>
      <div className="text-sm leading-relaxed">
        {text}
      </div>
      <div className="mt-2 flex items-center gap-2 opacity-0 transition group-hover:opacity-100">
        <Button size="sm" variant="ghost">Reply</Button>
        <Button size="sm" variant="ghost">Forward</Button>
        <Button size="sm" variant="ghost"><MoreVertical className="h-4 w-4" /></Button>
      </div>
    </div>
  </div>
);

const ComposerBar = () => (
  <div className="border-t bg-background p-3">
    <div className="flex items-end gap-2 rounded-2xl border p-2">
      <Button variant="ghost" size="icon"><Paperclip className="h-5 w-5" /></Button>
      <textarea
        rows={1}
        placeholder="Message…"
        className="min-h-[40px] w-full resize-none bg-transparent px-1 py-2 text-sm outline-none"
      />
      <Button variant="ghost" size="icon"><Smile className="h-5 w-5" /></Button>
      <Button size="icon" className="rounded-xl"><Send className="h-5 w-5" /></Button>
    </div>
  </div>
);

// ————————————————————————————————————————————————————————
// Main export
export default function WebexStyleWorkspace() {
  const [selectedSpaceId, setSelectedSpaceId] = useState<string | null>(null);
  const [tab, setTab] = useState("messages");
  const selectedSpace = spaces.find((s) => s.id === selectedSpaceId) || null;
  return (
    <div className="h-screen w-full bg-background text-foreground">
      <div className="grid h-full grid-cols-[72px_300px_1fr]">
        {/* Left Nav Rail */}
        <aside className="flex flex-col items-center border-r p-2">
          <motion.div initial={{ scale: 0.95, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} className="my-2">
            <div className="h-10 w-10 rounded-2xl bg-primary/10 grid place-items-center font-bold">W</div>
          </motion.div>
          <nav className="mt-2 grid gap-1">
            <RailIconButton icon={MessageSquare} label="Messaging" />
            <RailIconButton icon={Users} label="Teams" />
            <RailIconButton icon={Calendar} label="Meetings" />
            <RailIconButton icon={Phone} label="Calling" />
            <RailIconButton icon={Voicemail} label="Voicemail" />
            <RailIconButton icon={AppWindow} label="Apps" />
          </nav>
          <div className="mt-auto grid gap-1">
            <RailIconButton icon={Settings} label="Settings" />
          </div>
        </aside>

        {/* Spaces Sidebar */}
        <section className="flex min-w-0 flex-col border-r">
          <div className="flex items-center justify-between gap-2 p-3">
            <div>
              <div className="text-xs uppercase text-muted-foreground">Messaging</div>
              <div className="text-lg font-semibold">Spaces</div>
            </div>
            <div className="flex items-center gap-2">
              <Button size="sm" variant="outline"><Search className="mr-2 h-4 w-4"/>Search</Button>
              <Button size="sm"><Plus className="mr-2 h-4 w-4"/>New</Button>
            </div>
          </div>
          <div className="px-3 pb-2 space-y-2">
            <div className="flex gap-1">
              <FilterPill active>All</FilterPill>
              <FilterPill>Direct</FilterPill>
              <FilterPill>Spaces</FilterPill>
              <FilterPill>Public</FilterPill>
            </div>
            <ChipStrip items={["Recommended","Favorites","Finance","Leadership","Americas","EMEA","APAC","Ops","Reporting"]} />
          </div>
          <Separator />
          <ScrollArea className="h-[calc(100vh-160px)] px-2">
            <div className="py-2">
              {spaces.map((s) => (
                <SpaceListItem
                  key={s.id}
                  title={s.title}
                  unread={s.unread}
                  avatars={s.avatars}
                  active={selectedSpaceId === s.id}
                  onClick={() => { setSelectedSpaceId(s.id); setTab("messages"); }}
                />
              ))}
            </div>
          </ScrollArea>
        </section>

        {/* Space Area */}
        <main className="flex min-w-0 flex-col">
          {/* Toolbar */}
          <div className="flex items-center gap-3 px-4 py-3">
            <div className="flex flex-1 items-center gap-3">
              <div className="text-xl font-semibold">{selectedSpace ? selectedSpace.title : "Select a space"}</div>
              <Button variant="ghost" size="icon" aria-label="Star space"><Star className="h-5 w-5"/></Button>
            </div>

            {/* Search input aligned right */}
            <div className="hidden md:block w-72">
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground"/>
                <Input placeholder="Search, meet, and call" className="pl-8"/>
              </div>
            </div>

            {/* Required primary actions */}
            <Button className="rounded-xl"><LayoutTemplate className="mr-2 h-4 w-4"/>My Canvas</Button>
            <Button variant="secondary" className="rounded-xl"><Users className="mr-2 h-4 w-4"/>Collaborate</Button>
            <Button variant="ghost" size="icon" aria-label="More"><MoreVertical className="h-5 w-5"/></Button>
          </div>
          <Separator />

          {/* Tabs */}
          <Tabs value={tab} onValueChange={setTab} className="flex h-full flex-col">
            <div className="px-4 pt-3">
              <TabsList>
                <TabsTrigger value="messages">Messages</TabsTrigger>
                <TabsTrigger value="people">People (3)</TabsTrigger>
                <TabsTrigger value="content">Content</TabsTrigger>
                <TabsTrigger value="meetings">Meetings</TabsTrigger>
                <TabsTrigger value="apps">Apps</TabsTrigger>
              </TabsList>
            </div>

            {/* Messages Panel */}
            <TabsContent value="messages" className="flex h-full flex-col">
              <div className="grid grid-cols-1 gap-4 px-4 py-3 lg:grid-cols-2">
                <Card className="col-span-1 lg:col-span-2">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm">Pinned Preview</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid gap-4 md:grid-cols-3">
                      <div className="h-28 rounded-xl bg-muted" />
                      <div className="h-28 rounded-xl bg-muted" />
                      <div className="h-28 rounded-xl bg-muted" />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <ScrollArea className="mx-4 h-[calc(100vh-360px)] rounded-xl border">
                <div className="px-4">
                  {(selectedSpaceId ? messagesBySpace[selectedSpaceId] : []).map((m: any) => (
                    <div key={m.id} className="group">
                      <MessageItem {...m} />
                      <Separator />
                    </div>
                  ))}
                </div>
              </ScrollArea>

              <ComposerBar />
            </TabsContent>

            {/* People Panel */}
            <TabsContent value="people" className="h-full">
              <div className="px-4 py-3">
                <Card>
                  <CardHeader>
                    <CardTitle>People</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {["Girish Patel", "Mark Patterson", "Liz Carson"].map((name) => (
                      <div key={name} className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Avatar className="h-8 w-8"><AvatarFallback>{name.split(" ").map((n)=>n[0]).join("")}</AvatarFallback></Avatar>
                          <div>
                            <div className="text-sm font-medium">{name}</div>
                            <div className="text-xs text-muted-foreground">Member</div>
                          </div>
                        </div>
                        <Button size="sm" variant="outline"><UserPlus className="mr-2 h-4 w-4"/>Add</Button>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Content Panel */}
            <TabsContent value="content" className="h-full">
              <div className="grid gap-4 p-4 md:grid-cols-3">
                {Array.from({ length: 6 }).map((_, i) => (
                  <Card key={i} className="overflow-hidden">
                    <div className="h-28 bg-muted" />
                    <CardContent className="p-3 text-sm">Report_{i + 1}.pdf</CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            {/* Meetings Panel */}
            <TabsContent value="meetings" className="h-full">
              <div className="p-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Upcoming Meetings</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3 text-sm">
                    {["Infra Weekly Sync", "Finance Deep Dive", "Q4 Readout"].map((t, i) => (
                      <div key={i} className="flex items-center justify-between">
                        <div>{t}</div>
                        <Button size="sm" variant="secondary">Join</Button>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Apps Panel */}
            <TabsContent value="apps" className="h-full">
              <div className="grid gap-4 p-4 md:grid-cols-4">
                {Array.from({ length: 8 }).map((_, i) => (
                  <Card key={i} className="grid place-items-center p-6 text-sm">App {i + 1}</Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </main>
      </div>
    </div>
  );
}
